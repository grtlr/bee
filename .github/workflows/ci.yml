name: CI

on:
  push:
    branches:
      - mainnet
      - 'mainnet-develop*'
      - shimmer
      - 'shimmer-develop*'
    paths-ignore:
      - 'documentation/**'
      - '**.md'
      - 'bee-node/bee-node/docker/**'
  pull_request:
    branches:
      - mainnet
      - 'mainnet-develop*'
      - shimmer
      - 'shimmer-develop*'
    paths-ignore:
      - 'documentation/**'
      - '**.md'
      - 'bee-node/bee-node/docker/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  RUSTFLAGS: -Dwarnings
  RUST_BACKTRACE: 1

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      matrix:
        rust: [stable, beta]
        # Switch back to `windows-latest` when it reliably compiles again.
        os: [ubuntu-latest, macos-latest, windows-latest]
        experimental: [false]
        include:
            # The following ensures that workflows relying on `nightly` don't break.
          - rust: nightly
            os: ubuntu-latest
            experimental: true

    steps:
      - uses: actions/checkout@v2

      - name: Install LLVM and Clang (Windows)
        uses: KyleMayes/install-llvm-action@32c4866ebb71e0949e8833eb49beeebed48532bd
        if: contains(matrix.os, 'windows')
        with:
          version: "11.0"
          directory: ${{ runner.temp }}/llvm

      - name: Set LIBCLANG_PATH (Windows)
        run: echo "LIBCLANG_PATH=$((gcm clang).source -replace "clang.exe")" >> $env:GITHUB_ENV
        if: contains(matrix.os, 'windows')

      - name: Install ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true

      - uses: Swatinem/rust-cache@v1

      - uses: actions-rs/cargo@v1
        with:
          command: install cargo-hack

      - name: Build crates
        uses: actions-rs/cargo@v1
        with:
          command: ci-build

      - name: Test crates
        uses: actions-rs/cargo@v1
        with:
          command: ci-test

      - name: Doc test crates
        uses: actions-rs/cargo@v1
        with:
          command: ci-doctest

      - name: Install cargo-cache
        uses: actions-rs/cargo@v1
        with:
          command: install cargo-cache --no-default-features --features ci-autoclean

      - name: Clean cache
        uses: actions-rs/cargo@v1
        with:
          command: cache

  no_std:
    needs: build-and-test
    runs-on: ubuntu-latest
    continue-on-error: ${{ (matrix.rust != 'stable') }}
    strategy:
      matrix:
        rust: [stable, beta, nightly]
        crates: [
          "bee-ternary",
        ]

    steps:
      - uses: actions/checkout@v2

      - name: Install ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          target: riscv64gc-unknown-none-elf
          override: true

      - uses: Swatinem/rust-cache@v1

      - name: Check
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --release --target=riscv64gc-unknown-none-elf --manifest-path ${{ matrix.crates }}/Cargo.toml

      - name: Install cargo-cache
        uses: actions-rs/cargo@v1
        with:
          command: install cargo-cache --no-default-features --features ci-autoclean

      - name: Clean cache
        uses: actions-rs/cargo@v1
        with:
          command: cache

  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
            profile: minimal
            toolchain: nightly
            override: true
            components: rustfmt

      - uses: actions-rs/cargo@v1
        with:
          command: ci-fmt

  clippy:
    needs: format
    runs-on: ubuntu-latest
    continue-on-error: ${{ (matrix.rust != 'stable') }}
    strategy:
      matrix:
        rust: [stable, beta]

    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          components: clippy

      - uses: Swatinem/rust-cache@v1

      - uses: actions-rs/cargo@v1
        with:
          command: install cargo-hack

      - name: Run clippy
        uses: actions-rs/cargo@v1
        with:
          command: ci-clippy

      - name: Install cargo-cache
        uses: actions-rs/cargo@v1
        with:
          command: install cargo-cache --no-default-features --features ci-autoclean

      - name: Clean cache
        uses: actions-rs/cargo@v1
        with:
          command: cache

  udeps:
    needs: clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true

      - uses: Swatinem/rust-cache@v1

      - uses: actions-rs/install@v0.1
        with:
          crate: cargo-udeps
          version: latest

      - uses: actions-rs/cargo@v1
        with:
          command: install cargo-hack

      - name: Run udeps
        uses: actions-rs/cargo@v1
        with:
          command: ci-udeps

      - name: Install cargo-cache
        uses: actions-rs/cargo@v1
        with:
          command: install cargo-cache --no-default-features --features ci-autoclean

      - name: Clean cache
        uses: actions-rs/cargo@v1
        with:
          command: cache

  licenses:
    needs: clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
            profile: minimal
            toolchain: nightly
            override: true

      - uses: Swatinem/rust-cache@v1

      - uses: actions-rs/cargo@v1
        name: Install cargo-about
        with:
          command: install
          args: --force cargo-about

      - name: Move `about.toml` to project root
        run: mv .github/workflows/about.toml .

      - uses: actions-rs/cargo@v1
        name: Initialize template
        with:
          command: about
          args: init

      - uses: actions-rs/cargo@v1
        name: Check licenses
        with:
          command: about
          args: generate --workspace --all-features about.hbs

      - name: Install cargo-cache
        uses: actions-rs/cargo@v1
        with:
          command: install cargo-cache --no-default-features --features ci-autoclean

      - name: Clean cache
        uses: actions-rs/cargo@v1
        with:
          command: cache

  docs:
    needs: clippy
    runs-on: ubuntu-latest
    env:
      RUSTDOCFLAGS: "-D warnings"
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
            profile: minimal
            toolchain: nightly
            override: true

      - uses: Swatinem/rust-cache@v1

      - uses: actions-rs/cargo@v1
        with:
          command: install cargo-hack

      - name: Run doc
        uses: actions-rs/cargo@v1
        with:
          command: ci-doc
      
      - name: Install cargo-cache
        uses: actions-rs/cargo@v1
        with:
          command: install cargo-cache --no-default-features --features ci-autoclean

      - name: Clean cache
        uses: actions-rs/cargo@v1
        with:
          command: cache

  missing-files:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Run missing files check
        run: >
          bash .github/workflows/scripts/missing_files.sh
          bee-message/fuzz
